{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"": {
		"prefix": ["template"],
		"body": [
		  "import java.util.*;",
		  "import java.io.*;",
		  "",
		  "public class Main{",
		  "    static class FastReader{",
		  "        BufferedReader br;",
		  "        StringTokenizer st;",
		  "        public FastReader(){",
		  "            br=new BufferedReader(new InputStreamReader(System.in));",
		  "        }",
		  "        String next(){",
		  "            while(st==null || !st.hasMoreTokens()){",
		  "                try {",
		  "                    st=new StringTokenizer(br.readLine());",
		  "                } catch (IOException e) {",
		  "                    e.printStackTrace();",
		  "                }",
		  "            }",
		  "            return st.nextToken();",
		  "        }",
		  "        int nextInt(){",
		  "            return Integer.parseInt(next());",
		  "        }",
		  "        long nextLong(){",
		  "            return Long.parseLong(next());",
		  "        }",
		  "        double nextDouble(){",
		  "            return Double.parseDouble(next());",
		  "        }",
		  "        String nextLine(){",
		  "            String str=\"\";",
		  "            try {",
		  "                str=br.readLine().trim();",
		  "            } catch (Exception e) {",
		  "                e.printStackTrace();",
		  "            }",
		  "            return str;",
		  "        }",
		  "    }",
		  "    static FastReader vt = new FastReader();",
		  "    static PrintWriter out = new PrintWriter(System.out);",
		  "    ",
		  "    public static void main(String[] args) {",
		  "        try {",
		  "            int testCases = vt.nextInt();",
		  "            int testCases = 1;",
		  "            while(testCases-- > 0){",
		  "                // write code here",
		  "                solve();",
		  "            }",
		  "            out.flush();",
		  "        } catch (Exception e) {",
		  "            return;",
		  "        }",
		  "    }",
		  "    static void solve(){",
		  "        ",
		  "    }",
		  "}",
		  ""
		],
		"description": ""
	  }
}
