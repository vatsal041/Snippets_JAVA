{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"DSU": {
		"prefix": "dsu",
		"body": [
			"class DSU {",
			"    int[] parent;",
			"    int[] rank;",
			"",
			"    DSU(int n) {",
			"        parent = new int[n];",
			"        rank = new int[n];",
			"        for (int i = 0; i < n; i++) {",
			"            parent[i] = i;",
			"            rank[i] = 1;",
			"        }",
			"    }",
			"",
			"    int find(int x) {",
			"        if (parent[x] == x) {",
			"            return x;",
			"        }",
			"        return parent[x] = find(parent[x]);",
			"    }",
			"",
			"    void union(int x, int y) {",
			"        int px = find(x);",
			"        int py = find(y);",
			"        if (px != py) {",
			"            if (rank[x] > rank[y]) {",
			"                parent[py] = px;",
			"                rank[x] += rank[y];",
			"            } else {",
			"                parent[px] = py;",
			"                rank[y] += rank[x];",
			"            }",
			"        }",
			"    }",
			"}",
			""
		],
		"description": "DSU"
	}
}
