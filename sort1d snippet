{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"sort1d": {
		"prefix": ["sort1d"],
		"body": [
		  "static void merge(int arr[], int l, int m, int r) {",
		  "    int n1 = m - l + 1;",
		  "    int n2 = r - m;",
		  "    int L[] = new int[n1];",
		  "    int R[] = new int[n2];",
		  "    for (int i = 0; i < n1; ++i)",
		  "        L[i] = arr[l + i];",
		  "    for (int j = 0; j < n2; ++j)",
		  "        R[j] = arr[m + 1 + j];",
		  "    int i = 0, j = 0;",
		  "    int k = l;",
		  "    while (i < n1 && j < n2) {",
		  "        if (L[i] <= R[j]) {",
		  "            arr[k] = L[i];",
		  "            i++;",
		  "        } else {",
		  "            arr[k] = R[j];",
		  "            j++;",
		  "        }",
		  "        k++;",
		  "    }",
		  "    while (i < n1) {",
		  "        arr[k] = L[i];",
		  "        i++;",
		  "        k++;",
		  "    }",
		  "    while (j < n2) {",
		  "        arr[k] = R[j];",
		  "        j++;",
		  "        k++;",
		  "    }",
		  "}",
		  "",
		  "static void sort(int arr[], int l, int r) {",
		  "    if (l < r) {",
		  "        int m = l + (r - l) / 2;",
		  "        sort(arr, l, m);",
		  "        sort(arr, m + 1, r);",
		  "        merge(arr, l, m, r);",
		  "    }",
		  "}"
		],
		"description": "sort1d"
	  }
}
